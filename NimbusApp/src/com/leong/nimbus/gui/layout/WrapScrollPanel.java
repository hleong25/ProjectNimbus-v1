/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.gui.layout;

import com.leong.nimbus.gui.interfaces.ILayoutToCloudPanelProxy;
import com.leong.nimbus.utils.Logit;
import java.awt.Component;

/**
 *
 * @author henry
 */
public class WrapScrollPanel extends javax.swing.JPanel
{
    private static final Logit Log = Logit.create(WrapScrollPanel.class.getName());

    private ILayoutToCloudPanelProxy m_proxy;

    /**
     * Creates new form WrapScrollPanel
     */
    public WrapScrollPanel()
    {
        Log.entering("<init>");
        initComponents();
    }

    public void setProxy(ILayoutToCloudPanelProxy proxy)
    {
        m_proxy = proxy;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlScroll = new javax.swing.JScrollPane();
        pnlFiles = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlScroll.setMinimumSize(new java.awt.Dimension(400, 300));
        pnlScroll.setPreferredSize(new java.awt.Dimension(400, 300));

        pnlFiles.setBackground(new java.awt.Color(255, 255, 255));
        WrapLayout wraplayout = new WrapLayout(java.awt.FlowLayout.LEADING);
        wraplayout.setAlignOnBaseline(true);
        pnlFiles.setLayout(wraplayout);
        pnlFiles.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                pnlFilesMouseClicked(evt);
            }
        });
        pnlFiles.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                pnlFilesKeyReleased(evt);
            }
        });
        pnlScroll.setViewportView(pnlFiles);

        add(pnlScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void pnlFilesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_pnlFilesMouseClicked
    {//GEN-HEADEREND:event_pnlFilesMouseClicked
        pnlFiles.requestFocusInWindow();
    }//GEN-LAST:event_pnlFilesMouseClicked

    private void pnlFilesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_pnlFilesKeyReleased
    {//GEN-HEADEREND:event_pnlFilesKeyReleased
        Log.entering("pnlFilesKeyReleased", evt);
        m_proxy.proxyKeyReleased(evt);
    }//GEN-LAST:event_pnlFilesKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlFiles;
    private javax.swing.JScrollPane pnlScroll;
    // End of variables declaration//GEN-END:variables

    @Override
    public void removeAll()
    {
        pnlFiles.removeAll();
    }

    @Override
    public Component add(Component comp)
    {
        //Log.entering("add", comp);
        return pnlFiles.add(comp);
    }

}
