/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.local;

import com.leong.nimbus.clouds.interfaces.ICloudPanel;
import com.leong.nimbus.clouds.local.gui.LocalFileItem;
import com.leong.nimbus.clouds.local.gui.LocalFileItemPanelMouseAdapter;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.gui.helpers.BusyTaskCursor;
import com.leong.nimbus.gui.helpers.WrapLayout;
import com.leong.nimbus.utils.Tools;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author henry
 */
public class LocalPanel
    extends javax.swing.JPanel
    implements ICloudPanel
{
    private final LocalController m_local = new LocalController();

    private final Map<File, List<Component>> m_cachedComponents = new HashMap<>();

    /**
     * Creates new form LocalPanel
     */
    public LocalPanel()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        txtPath = new javax.swing.JTextField();
        pnlScroll = new javax.swing.JScrollPane();
        pnlFiles = new javax.swing.JPanel();

        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout(0, 2));

        txtPath.setText("Path");
        txtPath.setMargin(new java.awt.Insets(2, 2, 2, 2));
        add(txtPath, java.awt.BorderLayout.PAGE_START);

        pnlScroll.setMinimumSize(new java.awt.Dimension(400, 300));
        pnlScroll.setPreferredSize(new java.awt.Dimension(400, 300));

        pnlFiles.setBackground(new java.awt.Color(255, 255, 255));
        WrapLayout wraplayout = new WrapLayout(FlowLayout.LEADING);
        wraplayout.setAlignOnBaseline(true);
        pnlFiles.setLayout(wraplayout);
        pnlFiles.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                pnlFilesMouseClicked(evt);
            }
        });
        pnlFiles.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                pnlFilesKeyReleased(evt);
            }
        });
        pnlScroll.setViewportView(pnlFiles);

        add(pnlScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void pnlFilesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_pnlFilesMouseClicked
    {//GEN-HEADEREND:event_pnlFilesMouseClicked
        pnlFiles.requestFocusInWindow();
    }//GEN-LAST:event_pnlFilesMouseClicked

    private void pnlFilesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_pnlFilesKeyReleased
    {//GEN-HEADEREND:event_pnlFilesKeyReleased
        //Tools.logit("GDriveDialog.pnlFilesKeyReleased() keycode="+evt.getKeyCode());
        if (evt.getKeyCode() == KeyEvent.VK_F5)
        {
            Tools.logit("LocalPanel.pnlFilesKeyReleased() F5");
            //String currentPathID = m_gdrive.getCurrentPathID();
            //showFiles(currentPathID, true);
        }
    }//GEN-LAST:event_pnlFilesKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
    {//GEN-HEADEREND:event_formComponentShown
        File home = m_local.getHomeFile();
        showFiles(home, true);
    }//GEN-LAST:event_formComponentShown

    protected FileItemPanel createFileItemPanel(final File file)
    {
        FileItemPanel pnl = new FileItemPanel(new LocalFileItem(file));

        pnl.setBackground(Color.WHITE);

        pnl.addMouseListener(new LocalFileItemPanelMouseAdapter(file)
        {
            @Override
            public void onOpenFolder(File item)
            {
                responsiveShowFiles(item, false);
            }
        });

        //pnl.addMouseListener(new MouseAdapter()
        //{
        //    @Override
        //    public void mouseClicked(MouseEvent e)
        //    {
        //        FileItemPanel pnl = (FileItemPanel) e.getSource();
        //        pnl.setHighlight(true);

        //        super.mouseClicked(e);
        //    }

        //});

        return pnl;
    }

    protected void responsiveShowFiles(final File path, final boolean forceRefresh)
    {
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                showFiles(path, forceRefresh);
            }
        });
    }

    protected List<Component> getFiles(final File currPath, final boolean forceRefresh)
    {
        List<Component> list;

        if (!forceRefresh && m_cachedComponents.containsKey(currPath))
        {
            Tools.logit("LocalPanel.getFiles() Cache hit!");
            list = m_cachedComponents.get(currPath);
        }
        else
        {
            list = new LinkedList<>();

            // show parent link
            {
                File parentFile = m_local.getParentFile(currPath);

                if (parentFile != null)
                {
                    FileItemPanel pnl = createFileItemPanel(parentFile);

                    pnl.setLabel("..");

                    list.add(pnl);
                }
            }

            // get all files in this folder
            final List<File> files = m_local.getFiles(currPath.getAbsolutePath(), forceRefresh);

            Tools.logit("LocalPanel.getFiles() Total files: "+files.size());

            for (File file : files)
            {
                FileItemPanel pnl = createFileItemPanel(file);
                list.add(pnl);
            }

            m_cachedComponents.put(currPath, list);
        }

        return list;
    }

    protected void showFiles(final File currPath, final boolean forceRefresh)
    {
        Tools.logit("LocalPanel.showFiles("+currPath.getAbsolutePath()+")");
        txtPath.setText(currPath.getAbsolutePath());

        List<Component> list = getFiles(currPath, forceRefresh);

        // remove all items first
        pnlFiles.removeAll();

        // add the components to the panel
        for (Component pnl : list)
        {
            pnlFiles.add(pnl);
        }

        // make sure repaint happens
        pnlFiles.revalidate();
        pnlFiles.repaint();

        // for keyreleased to work properly
        pnlFiles.requestFocusInWindow();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlFiles;
    private javax.swing.JScrollPane pnlScroll;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
}
