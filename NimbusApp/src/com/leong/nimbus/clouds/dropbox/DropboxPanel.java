/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.dropbox;

import com.dropbox.core.DbxEntry;
import com.leong.nimbus.clouds.dropbox.gui.DropboxFileItem;
import com.leong.nimbus.clouds.dropbox.gui.DropboxFileItemPanelMouseAdapter;
import com.leong.nimbus.clouds.interfaces.CloudPanelAdapter;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.gui.helpers.BusyTaskCursor;
import com.leong.nimbus.gui.helpers.DefaultDropTargetAdapter;
import com.leong.nimbus.gui.layout.AllCardsPanel;
import com.leong.nimbus.gui.layout.WrapLayout;
import com.leong.nimbus.utils.Logit;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.dnd.DropTarget;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author henry
 */
public class DropboxPanel
    extends CloudPanelAdapter<DbxEntry, DropboxController>
{
    private static final Logit Log = Logit.create(DropboxPanel.class.getName());

    /**
     * Creates new form DropboxPanel
     */
    public DropboxPanel()
    {
        super();

        Log.entering("<init>");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnConnect = new javax.swing.JButton();
        pnlFiles = new com.leong.nimbus.gui.layout.AllCardsPanel();

        setLayout(new java.awt.BorderLayout());

        btnConnect.setText("Connect to Dropbox!");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });
        add(btnConnect, java.awt.BorderLayout.PAGE_START);
        add(pnlFiles, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
            {
                @Override
                public void run()
                {
                    if (m_controller.login(DropboxPanel.this))
                    {
                        // setup drag and drop once logged in
                        //new DropTarget(pnlFiles, m_dropTarget);

                        //new DropTarget(pnlFiles, new DefaultDropTargetAdapter()
                        //    {
                        //        @Override
                        //        public boolean onAction_drop(List list)
                        //        {
                        //            return DropboxPanel.this.onAction_drop(list);
                        //        }
                        //    });

                        //    showFiles(m_controller.getRoot(), false);
                        //}
                    }
                }
            });
    }//GEN-LAST:event_btnConnectActionPerformed

    protected boolean onAction_drop(List list)
    {
        Log.entering("onAction_drop", new Object[]{list});

        return false;
        /*
        class FileHolder
        {
            public java.io.File content;
            public File metadata;
            public FileItemPanel pnl;
        }

        List<FileHolder> uploadFiles = new ArrayList<>();

        for (Object obj : list)
        {
            final java.io.File content = (java.io.File) obj;
            final File metadata = m_controller.generateMetadata(m_currentPath, content);
            final FileItemPanel pnl = createFileItemPanel(metadata);

            pnl.showProgress(true);

            FileHolder holder = new FileHolder();
            holder.content = content;
            holder.metadata = metadata;
            holder.pnl = pnl;

            uploadFiles.add(holder);

            // show the new item being added
            pnlFiles.add(pnl);
            pnlFiles.revalidate();

            ResponsiveTaskUI.yield();
        }

        // Loop them through
        for (FileHolder holder : uploadFiles)
        {
            // Print out the file path
            Log.fine("File path: "+holder.content.getPath());

            final FileItemPanel pnl = holder.pnl;

            m_controller.uploadLocalFile(holder.metadata, holder.content, new MediaHttpUploaderProgressListener()
            {
                @Override
                public void progressChanged(MediaHttpUploader mhu) throws IOException
                {
                    switch (mhu.getUploadState()) {
                        case INITIATION_STARTED:
                            Log.fine("Initiation has started!");
                            break;
                        case INITIATION_COMPLETE:
                            Log.fine("Initiation is complete!");
                            break;
                        case MEDIA_IN_PROGRESS:
                            Log.finer("BytesSent: "+mhu.getNumBytesUploaded()+" Progress: "+mhu.getProgress());
                            pnl.setProgress((int)(mhu.getProgress()*100.0));
                            ResponsiveTaskUI.yield();
                            break;
                        case MEDIA_COMPLETE:
                            Log.fine("Upload is complete!");
                            pnl.setProgress(100);
                            ResponsiveTaskUI.yield();
                            break;
                    }
                }
            });
        }

        showFiles(m_currentPath, false);

        return true;
        */
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private com.leong.nimbus.gui.layout.AllCardsPanel pnlFiles;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initPanel()
    {
        Log.entering("initPanel");
        m_controller = new DropboxController();
    }

    @Override
    public String getAbsolutePath(DbxEntry item)
    {
        Log.entering("getAbsolutePath", new Object[]{item.toStringMultiline()});
        return item.path;
    }

    @Override
    public FileItemPanel createFileItemPanel(DbxEntry file)
    {
        FileItemPanel pnl = new FileItemPanel(new DropboxFileItem(file));

        pnl.setBackground(Color.WHITE);

        pnl.addMouseListener(new DropboxFileItemPanelMouseAdapter(file)
        {
            @Override
            public void onOpenFolder(final DbxEntry item)
            {
                responsiveShowFiles(item, true);
            }
        });

        return pnl;
    }

    @Override
    public AllCardsPanel getFilesPanel()
    {
        return pnlFiles;
    }
}
