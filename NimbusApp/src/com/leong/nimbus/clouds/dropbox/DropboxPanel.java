/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.dropbox;

import com.dropbox.core.DbxEntry;
import com.leong.nimbus.clouds.dropbox.gui.DropboxFileItem;
import com.leong.nimbus.clouds.dropbox.gui.DropboxFileItemPanelMouseAdapter;
import com.leong.nimbus.clouds.interfaces.ICloudPanel;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.gui.helpers.BusyTaskCursor;
import com.leong.nimbus.gui.helpers.DefaultDropTargetAdapter;
import com.leong.nimbus.gui.helpers.FileItemPanelGroup;
import com.leong.nimbus.gui.helpers.WrapLayout;
import com.leong.nimbus.utils.Logit;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.dnd.DropTarget;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author henry
 */
public class DropboxPanel
    extends javax.swing.JPanel
    implements ICloudPanel
{
    private static final Logit Log = Logit.create(DropboxPanel.class.getName());

    private final DropboxController m_controller = new DropboxController();

    private final Map<DbxEntry, List<Component>> m_cachedComponents = new HashMap<>();

    private DbxEntry m_currentPath;

    /**
     * Creates new form DropboxPanel
     */
    public DropboxPanel()
    {
        Log.entering("<init>");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnConnect = new javax.swing.JButton();
        pnlScroll = new javax.swing.JScrollPane();
        pnlFiles = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        btnConnect.setText("Connect to Dropbox!");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });
        add(btnConnect, java.awt.BorderLayout.PAGE_START);

        pnlScroll.setMinimumSize(new java.awt.Dimension(400, 300));
        pnlScroll.setPreferredSize(new java.awt.Dimension(400, 300));

        pnlFiles.setBackground(new java.awt.Color(255, 255, 255));
        WrapLayout wraplayout = new WrapLayout(FlowLayout.LEADING);
        wraplayout.setAlignOnBaseline(true);
        pnlFiles.setLayout(wraplayout);
        pnlFiles.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                pnlFilesMouseClicked(evt);
            }
        });
        pnlFiles.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                pnlFilesKeyReleased(evt);
            }
        });
        pnlScroll.setViewportView(pnlFiles);

        add(pnlScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
            {
                @Override
                public void run()
                {
                    if (m_controller.login(DropboxPanel.this))
                    {
                        // setup drag and drop once logged in
                        //new DropTarget(pnlFiles, m_dropTarget);

                        new DropTarget(pnlFiles, new DefaultDropTargetAdapter()
                            {
                                @Override
                                public boolean onAction_drop(List list)
                                {
                                    return DropboxPanel.this.onAction_drop(list);
                                }
                            });

                            showFiles(m_controller.getRoot(), false);
                        }
                    }
                });
    }//GEN-LAST:event_btnConnectActionPerformed

    private void pnlFilesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_pnlFilesMouseClicked
    {//GEN-HEADEREND:event_pnlFilesMouseClicked
        pnlFiles.requestFocusInWindow();
    }//GEN-LAST:event_pnlFilesMouseClicked

    private void pnlFilesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_pnlFilesKeyReleased
    {//GEN-HEADEREND:event_pnlFilesKeyReleased
        Log.entering("pnlFilesKeyReleased", evt);
        if (evt.getKeyCode() == KeyEvent.VK_F5)
        {
            Log.fine("KeyEvent.VK_F5");
            showFiles(m_currentPath, false);
        }
    }//GEN-LAST:event_pnlFilesKeyReleased

    protected FileItemPanel createFileItemPanel(final DbxEntry entry)
    {
        FileItemPanel pnl = new FileItemPanel(new DropboxFileItem(entry));

        pnl.setBackground(Color.WHITE);

        pnl.addMouseListener(new DropboxFileItemPanelMouseAdapter(entry)
        {
            @Override
            public void onOpenFolder(DbxEntry parent)
            {
                responsiveShowFiles(parent, true);
            }
        });

        pnl.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent e)
            {
                FileItemPanel pnl = (FileItemPanel) e.getSource();
                pnl.setHighlight(true);

                super.mouseClicked(e);
            }

        });

        return pnl;
    }

    protected void responsiveShowFiles(final DbxEntry parent, final boolean useCache)
    {
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                showFiles(parent, useCache);
            }
        });
    }

    protected List<Component> getFiles(final DbxEntry parent, final boolean useCache)
    {
        Log.entering("getFiles", new Object[]{parent != null ? parent.path : "(parent.null)", useCache});

        List<Component> list;

        if (useCache && m_cachedComponents.containsKey(parent))
        {
            Log.fine(String.format("Cache hit '%s'", parent.path));
            list = m_cachedComponents.get(parent);
        }
        else
        {
            list = new ArrayList<>();

            FileItemPanelGroup group = new FileItemPanelGroup();

            // show parent link
            {
                DbxEntry grandParentFile = m_controller.getParent(parent);

                if (grandParentFile != null)
                {
                    FileItemPanel pnl = createFileItemPanel(grandParentFile);

                    pnl.setLabel("..");

                    group.add(pnl);
                    list.add(pnl);
                }
            }

            // get all files in this folder
            final List<DbxEntry> files = m_controller.getChildrenItems(parent, useCache);

            Log.fine("Total files: "+files.size());

            for (DbxEntry file : files)
            {
                FileItemPanel pnl = createFileItemPanel(file);
                group.add(pnl);
                list.add(pnl);
            }

            m_cachedComponents.put(parent, list);
        }

        return list;
    }

    protected void showFiles(final DbxEntry parent, final boolean useCache)
    {
        Log.entering("showFiles", new Object[]{parent != null ? parent.path : "(parent.null)", useCache});

        m_currentPath = parent;

        List<Component> list = getFiles(parent, useCache);

        if (!list.isEmpty())
        {
            // must reset the highlights
            FileItemPanel pnl = (FileItemPanel) list.get(0);
            if (pnl.getGroup() != null)
            {
                pnl.getGroup().reset();
            }
        }

        // remove all items first
        pnlFiles.removeAll();

        // add the components to the panel
        for (Component pnl : list)
        {
            pnlFiles.add(pnl);
        }

        // make sure repaint happens
        pnlFiles.revalidate();
        pnlFiles.repaint();

        // for keyreleased to work properly
        pnlFiles.requestFocusInWindow();
    }

    protected boolean onAction_drop(List list)
    {
        Log.entering("onAction_drop", new Object[]{list});
        return true;
    }

    //protected boolean onAction_drop(List list)
    //{
    //    Log.entering("onAction_drop", new Object[]{list});

    //    class FileHolder
    //    {
    //        public java.io.File content;
    //        public File metadata;
    //        public FileItemPanel pnl;
    //    }

    //    List<FileHolder> uploadFiles = new ArrayList<>();

    //    for (Object obj : list)
    //    {
    //        final java.io.File content = (java.io.File) obj;
    //        final File metadata = m_controller.generateMetadata(m_currentPath, content);
    //        final FileItemPanel pnl = createFileItemPanel(metadata);

    //        pnl.showProgress(true);

    //        FileHolder holder = new FileHolder();
    //        holder.content = content;
    //        holder.metadata = metadata;
    //        holder.pnl = pnl;

    //        uploadFiles.add(holder);

    //        // show the new item being added
    //        pnlFiles.add(pnl);
    //        pnlFiles.revalidate();

    //        ResponsiveTaskUI.yield();
    //    }

    //    // Loop them through
    //    for (FileHolder holder : uploadFiles)
    //    {
    //        // Print out the file path
    //        Log.fine("File path: "+holder.content.getPath());

    //        final FileItemPanel pnl = holder.pnl;

    //        m_controller.uploadLocalFile(holder.metadata, holder.content, new MediaHttpUploaderProgressListener()
    //        {
    //            @Override
    //            public void progressChanged(MediaHttpUploader mhu) throws IOException
    //            {
    //                switch (mhu.getUploadState()) {
    //                    case INITIATION_STARTED:
    //                        Log.fine("Initiation has started!");
    //                        break;
    //                    case INITIATION_COMPLETE:
    //                        Log.fine("Initiation is complete!");
    //                        break;
    //                    case MEDIA_IN_PROGRESS:
    //                        Log.finer("BytesSent: "+mhu.getNumBytesUploaded()+" Progress: "+mhu.getProgress());
    //                        pnl.setProgress((int)(mhu.getProgress()*100.0));
    //                        ResponsiveTaskUI.yield();
    //                        break;
    //                    case MEDIA_COMPLETE:
    //                        Log.fine("Upload is complete!");
    //                        pnl.setProgress(100);
    //                        ResponsiveTaskUI.yield();
    //                        break;
    //                }
    //            }
    //        });
    //    }

    //    showFiles(m_currentPath, false);

    //    return true;
    //}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JPanel pnlFiles;
    private javax.swing.JScrollPane pnlScroll;
    // End of variables declaration//GEN-END:variables
}
