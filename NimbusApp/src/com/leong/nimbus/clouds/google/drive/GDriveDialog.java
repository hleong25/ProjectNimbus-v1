/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.google.drive;

import com.google.api.client.googleapis.media.MediaHttpUploader;
import com.google.api.client.googleapis.media.MediaHttpUploaderProgressListener;
import com.google.api.services.drive.model.File;
import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItem;
import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItemPanelMouseListener;
import com.leong.nimbus.gui.AbstractJDialog;
import com.leong.nimbus.gui.BusyTaskCursor;
import com.leong.nimbus.gui.WrapLayout;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.utils.Tools;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.dnd.DropTarget;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author henry
 */
public class GDriveDialog extends AbstractJDialog
{
    /**
     * Creates new form GDriveDialog
     */
    public GDriveDialog()
    {
        initComponents();

        m_bgcolor = pnlFiles.getBackground();

        new DropTarget(pnlFiles, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnConnect = new javax.swing.JButton();
        pnlScroll = new javax.swing.JScrollPane();
        pnlFiles = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Google Drive");

        btnConnect.setText("Connect to Google Drive!");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });
        getContentPane().add(btnConnect, java.awt.BorderLayout.PAGE_START);

        pnlScroll.setMinimumSize(new java.awt.Dimension(400, 300));
        pnlScroll.setPreferredSize(new java.awt.Dimension(400, 300));

        pnlFiles.setBackground(new java.awt.Color(255, 255, 255));
        WrapLayout wraplayout = new WrapLayout(FlowLayout.LEADING);
        wraplayout.setAlignOnBaseline(true);
        pnlFiles.setLayout(wraplayout);
        pnlScroll.setViewportView(pnlFiles);

        getContentPane().add(pnlScroll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                if (m_gdrive.login())
                {
                    showFiles(GDriveConstants.FOLDER_ROOT);
                }
            }
        });
    }//GEN-LAST:event_btnConnectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JPanel pnlFiles;
    private javax.swing.JScrollPane pnlScroll;
    // End of variables declaration//GEN-END:variables

    private final GDriveController m_gdrive = new GDriveController();
    private final Color m_bgcolor;

    protected FileItemPanel createFileItemPanel(final File file)
    {
        FileItemPanel pnl = new FileItemPanel(new GDriveFileItem(file));

        pnl.setBackground(m_bgcolor);

        pnl.addMouseListener(new GDriveFileItemPanelMouseListener(file)
        {
            @Override
            public void onOpenFolder(File item)
            {
                showFiles(item.getId());
            }
        });

        return pnl;
    }

    protected void showFiles(final String pathID)
    {
        Tools.logit("GDriveDialog.showFiles("+pathID+")");

        final List<File> files = new LinkedList<>();

        // remove all items first
        pnlFiles.removeAll();

        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                // show parent link
                {
                    File parentFile = m_gdrive.getParentFile(pathID);

                    if (parentFile != null)
                    {
                        FileItemPanel pnl = createFileItemPanel(parentFile);

                        pnl.setLabel("..");

                        pnlFiles.add(pnl);
                    }
                }

                // get all files in this folder
                files.addAll(m_gdrive.getFiles(pathID));
            }
        });

        for (File file : files)
        {
            FileItemPanel pnl = createFileItemPanel(file);
            pnlFiles.add(pnl);
        }

        pnlFiles.revalidate();
        pnlFiles.repaint();

    }

    @Override
    protected boolean onDropAction(List objs)
    {
        Tools.logit("GDriveDialog.onDropAction()");

        // Loop them through
        for (Object obj : objs)
        {
            java.io.File file = (java.io.File) obj;

            // Print out the file path
            Tools.logit("File path is '" + file.getPath() + "'.");

            m_gdrive.uploadLocalFile(file, new MediaHttpUploaderProgressListener()
            {
                @Override
                public void progressChanged(MediaHttpUploader mhu) throws IOException
                {
                    switch (mhu.getUploadState()) {
                        case INITIATION_STARTED:
                            Tools.logit("Initiation has started!");
                            break;
                        case INITIATION_COMPLETE:
                            Tools.logit("Initiation is complete!");
                            break;
                        case MEDIA_IN_PROGRESS:
                            Tools.logit("BytesSent: "+mhu.getNumBytesUploaded()+" Progress: "+mhu.getProgress());
                            break;
                        case MEDIA_COMPLETE:
                            Tools.logit("Upload is complete!");
                    }
                }
            });

        }

        return true;
    }
}
