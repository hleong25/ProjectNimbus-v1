/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.google.drive;

import com.google.api.services.drive.model.File;
import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItem;
import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItemPanelMouseAdapter;
import com.leong.nimbus.clouds.interfaces.CloudPanelAdapter;
import com.leong.nimbus.clouds.interfaces.ICloudProgress;
import com.leong.nimbus.clouds.interfaces.ICloudTransfer;
import com.leong.nimbus.clouds.interfaces.transferadapters.LocalToGDriveTransferAdapter;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.gui.helpers.BusyTaskCursor;
import com.leong.nimbus.gui.helpers.DefaultDropTargetAdapter;
import com.leong.nimbus.gui.helpers.ResponsiveTaskUI;
import com.leong.nimbus.gui.layout.AllCardsPanel;
import com.leong.nimbus.utils.Logit;
import java.awt.Color;
import java.awt.dnd.DropTarget;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author henry
 */
public class GDrivePanel
    extends CloudPanelAdapter<File, GDriveController>
{
    private static final Logit Log = Logit.create(GDrivePanel.class.getName());

    /**
     * Creates new form GDrivePanel
     */
    public GDrivePanel()
    {
        super();

        Log.entering("<init>");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnConnect = new javax.swing.JButton();
        pnlFiles = new com.leong.nimbus.gui.layout.AllCardsPanel();

        setLayout(new java.awt.BorderLayout());

        btnConnect.setText("Connect to Google Drive!");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });
        add(btnConnect, java.awt.BorderLayout.PAGE_START);
        add(pnlFiles, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                if (m_controller.login(GDrivePanel.this))
                {
                    new DropTarget(pnlFiles, new DefaultDropTargetAdapter()
                    {
                        @Override
                        public boolean onAction_drop(List list)
                        {
                            return GDrivePanel.this.onAction_drop(list);
                        }
                    });

                    showFiles(m_controller.getRoot(), false);
                }
            }
        });
    }//GEN-LAST:event_btnConnectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private com.leong.nimbus.gui.layout.AllCardsPanel pnlFiles;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initPanel()
    {
        Log.entering("initPanel");
        m_controller = new GDriveController();

        pnlFiles.setProxy(this);
    }

    @Override
    public String getAbsolutePath(File item)
    {
        Log.entering("getAbsolutePath", new Object[]{item});
        return item.getId();
    }

    @Override
    public FileItemPanel createFileItemPanel(File file)
    {
        FileItemPanel pnl = new FileItemPanel(new GDriveFileItem(file));

        pnl.setBackground(Color.WHITE);

        pnl.addMouseListener(new GDriveFileItemPanelMouseAdapter(file)
        {
            @Override
            public void onOpenFolder(final File item)
            {
                responsiveShowFiles(item, true);
            }
        });

        return pnl;
    }

    @Override
    public AllCardsPanel getFilesPanel()
    {
        return pnlFiles;
    }

    protected boolean onAction_drop(List list)
    {
        Log.entering("onAction_drop", new Object[]{list});

        class XferHolder
        {
            public ICloudTransfer<java.io.File, com.google.api.services.drive.model.File> xfer;
            public FileItemPanel pnl;
        }

        List<XferHolder> uploadFiles = new ArrayList<>();

        for (Object obj : list)
        {
            final java.io.File inputFile = (java.io.File) obj;
            final com.google.api.services.drive.model.File outputFile = m_controller.generateMetadata(m_currentPath, inputFile);
            final FileItemPanel pnl = createFileItemPanel(outputFile);

            pnl.showProgress(true);

            XferHolder holder = new XferHolder();
            holder.xfer = new LocalToGDriveTransferAdapter(inputFile, outputFile);
            holder.pnl = pnl;

            uploadFiles.add(holder);

            // show the new item being added
            pnlFiles.add(pnl);
            pnlFiles.revalidate();

            ResponsiveTaskUI.yield();
        }

        // Loop them through
        for (XferHolder holder : uploadFiles)
        {
            // Print out the file path
            Log.fine("File path: "+holder.xfer.getSourceObject().getName());

            final FileItemPanel pnl = holder.pnl;

            holder.xfer.setProgressHandler(new ICloudProgress()
            {
                private long m_size = 0;

                @Override
                public void initalize()
                {
                    m_size = 0;
                }

                @Override
                public void start(long size)
                {
                    m_size = size;
                }

                @Override
                public void progress(long bytesSent)
                {
                    pnl.setProgress((int)(bytesSent*100/m_size));
                    ResponsiveTaskUI.yield();
                }

                @Override
                public void finish()
                {
                    pnl.setProgress(100);
                    ResponsiveTaskUI.yield();
                }
            });

            m_controller.transfer(holder.xfer);
        }

        showFiles(m_currentPath, false);
        return true;
    }
}
