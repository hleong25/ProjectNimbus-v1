/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.leong.nimbus.clouds.google.drive;

import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItem;
import com.leong.nimbus.clouds.google.drive.gui.GDriveFileItemPanelMouseAdapter;
import com.leong.nimbus.clouds.interfaces.CloudPanelAdapter;
import com.leong.nimbus.clouds.interfaces.ICloudController;
import com.leong.nimbus.clouds.interfaces.transferadapters.CloudFileUtils;
import com.leong.nimbus.clouds.interfaces.transferadapters.DropboxToGDriveTransferAdapter;
import com.leong.nimbus.clouds.interfaces.transferadapters.GDriveToGDriveTransferAdapter;
import com.leong.nimbus.clouds.interfaces.transferadapters.LocalToGDriveTransferAdapter;
import com.leong.nimbus.gui.components.FileItemPanel;
import com.leong.nimbus.gui.datatransfer.TransferableContainer;
import com.leong.nimbus.gui.helpers.DefaultDropTargetAdapter;
import com.leong.nimbus.gui.helpers.XferHolder;
import com.leong.nimbus.gui.layout.AllCardsPanel;
import com.leong.nimbus.utils.GlobalCache;
import com.leong.nimbus.utils.GlobalCacheKey;
import com.leong.nimbus.utils.Logit;
import java.awt.Color;
import java.awt.dnd.DropTarget;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

/**
 *
 * @author henry
 */
public class GDrivePanel
    extends CloudPanelAdapter<com.google.api.services.drive.model.File, GDriveController>
{
    private static final Logit Log = Logit.create(GDrivePanel.class.getName());

    private final List<com.google.api.services.drive.model.File> m_trailPaths = new ArrayList<>();

    /**
     * Creates new form GDrivePanel
     */
    public GDrivePanel()
    {
        super();

        Log.entering("<init>");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlTop = new javax.swing.JPanel();
        txtPath = new javax.swing.JTextField();
        pnlFiles = new com.leong.nimbus.gui.layout.AllCardsPanel();

        setLayout(new java.awt.BorderLayout());

        pnlTop.setLayout(new java.awt.GridBagLayout());

        txtPath.setText("Path");
        txtPath.setMargin(new java.awt.Insets(2, 2, 2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        pnlTop.add(txtPath, gridBagConstraints);

        add(pnlTop, java.awt.BorderLayout.NORTH);
        add(pnlFiles, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.leong.nimbus.gui.layout.AllCardsPanel pnlFiles;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initPanel()
    {
        Log.entering("initPanel");
        m_controller = new GDriveController();

        pnlFiles.setProxy(this);

        txtPath.setText("");
    }

    @Override
    public boolean login(String uniqueid)
    {
        Log.entering("login", new Object[]{uniqueid});

        if (m_controller.login(GDrivePanel.this, uniqueid))
        {
            new DropTarget(pnlFiles, new DefaultDropTargetAdapter()
            {
                @Override
                public boolean onAction_drop(TransferableContainer tc)
                {
                    return GDrivePanel.this.onAction_drop(tc);
                }
            });

            showFiles(m_controller.getRoot(), false);
            return true;
        }

        return false;
    }

    @Override
    public String getAbsolutePath(com.google.api.services.drive.model.File item)
    {
        Log.entering("getAbsolutePath", new Object[]{item});
        return item.getId();
    }

    @Override
    public void setCurrentPath(com.google.api.services.drive.model.File path)
    {
        Log.entering("setCurrentPath", new Object[]{path.getId()});

        super.setCurrentPath(path);

        if (m_trailPaths.contains(path))
        {
            // the list of trails has the path,
            // remove everything after it

            final List<com.google.api.services.drive.model.File> removeList = new ArrayList<>();
            int idx = m_trailPaths.indexOf(path);

            ListIterator<com.google.api.services.drive.model.File> itr = m_trailPaths.listIterator(idx + 1);
            while (itr.hasNext())
            {
                removeList.add(itr.next());
            }

            // remove all from list
            m_trailPaths.removeAll(removeList);
        }
        else
        {
            m_trailPaths.add(path);
        }

        String pathStr = "";
        for (com.google.api.services.drive.model.File trail : m_trailPaths)
        {
            pathStr += "/" + trail.getTitle();
        }

        txtPath.setText(pathStr);
    }

    @Override
    public FileItemPanel createFileItemPanel(com.google.api.services.drive.model.File file)
    {
        FileItemPanel pnl = new FileItemPanel(new GDriveFileItem(m_controller, file));

        pnl.setBackground(Color.WHITE);

        pnl.addMouseListener(new GDriveFileItemPanelMouseAdapter(file)
        {
            @Override
            public void onOpenFolder(final com.google.api.services.drive.model.File item)
            {
                responsiveShowFiles(item, true);
            }
        });

        return pnl;
    }

    @Override
    public AllCardsPanel getFilesPanel()
    {
        return pnlFiles;
    }

    @Override
    public XferHolder<?, com.google.api.services.drive.model.File> createXferHolder(GlobalCacheKey globalCacheKey, Object input)
    {
        final GlobalCacheKey targetCacheKey = GlobalCache.getInstance().getKey(m_controller);
        final ICloudController genericInputController = (ICloudController) GlobalCache.getInstance().get(globalCacheKey);
        switch (genericInputController.getCloudType())
        {
            case LOCAL_FILE_SYSTEM:
            {
                final java.io.File inputFile = (java.io.File)input;
                final com.google.api.services.drive.model.File outputFile = CloudFileUtils.convertToGDrive(m_currentPath, inputFile);
                final FileItemPanel pnl = createFileItemPanel(outputFile);

                pnl.showProgress(true);

                XferHolder<java.io.File, com.google.api.services.drive.model.File> holder = new XferHolder<>();
                holder.xfer = new LocalToGDriveTransferAdapter(globalCacheKey, inputFile, targetCacheKey, outputFile);
                holder.pnl = pnl;

                return holder;
            }

            case GOOGLE_DRIVE:
            {
                final com.google.api.services.drive.model.File inputFile = (com.google.api.services.drive.model.File)input;
                final com.google.api.services.drive.model.File outputFile = CloudFileUtils.convertToGDrive(m_currentPath, inputFile);
                final FileItemPanel pnl = createFileItemPanel(outputFile);

                pnl.showProgress(true);

                XferHolder<com.google.api.services.drive.model.File, com.google.api.services.drive.model.File> holder = new XferHolder<>();
                holder.xfer = new GDriveToGDriveTransferAdapter(globalCacheKey, inputFile, targetCacheKey, outputFile);
                holder.pnl = pnl;

                return holder;
            }

            case DROPBOX:
            {
                final com.dropbox.core.DbxEntry inputFile = (com.dropbox.core.DbxEntry)input;
                final com.google.api.services.drive.model.File outputFile = CloudFileUtils.convertToGDrive(m_currentPath, inputFile);
                final FileItemPanel pnl = createFileItemPanel(outputFile);

                pnl.showProgress(true);

                XferHolder<com.dropbox.core.DbxEntry, com.google.api.services.drive.model.File> holder = new XferHolder<>();
                holder.xfer = new DropboxToGDriveTransferAdapter(globalCacheKey, inputFile, targetCacheKey, outputFile);
                holder.pnl = pnl;

                return holder;
            }

            default:
                return null;
        }
    }

}
